apply plugin: 'java'
apply plugin: 'maven'

group='com.codeborne'
archivesBaseName = 'replay'
version='1.6-SNAPSHOT'

[compileJava, compileTestJava]*.options.collect {options -> options.encoding = 'UTF-8'}
[compileJava, compileTestJava]*.options.collect {options -> options.debug = true}
compileJava.options.debugOptions.debugLevel = "source,lines,vars"
sourceCompatibility = 1.8
targetCompatibility = 1.8

defaultTasks 'clean', 'test', 'jar'

repositories {
  jcenter()
  mavenCentral()
}

sourceSets {
  main {
    java {srcDir 'src'}
    resources {srcDir 'src'}
  }
  test {
    java {srcDir 'test'}
    resources {srcDir 'test'}
  }
}

configurations {
  provided
  compile.extendsFrom provided
}

dependencies {
  compile('antlr:antlr:2.7.7')
  compile('com.mchange:c3p0:0.9.5.2')
  compile('com.zaxxer:HikariCP:2.7.2')
  compile('org.ow2.asm:asm-all:5.2')
  compile('cglib:cglib:3.2.4') {transitive = false}
  compile('com.google.code.gson:gson:2.8.0')
  compile('com.jamonapi:jamon:2.81') {transitive = false}
  compile('com.ning:async-http-client:1.9.40')
  compile('commons-beanutils:commons-beanutils:1.9.2')
  compile('commons-codec:commons-codec:1.10')
  compile('org.apache.commons:commons-email:1.4') {transitive = false}
  compile('commons-fileupload:commons-fileupload:1.3.2')
  compile('commons-collections:commons-collections:3.2.2')
  compile('commons-io:commons-io:2.5')
  compile('com.google.code.maven-play-plugin.org.apache.commons:commons-javaflow:1590792-patched-play-1.3.0') {transitive = false}
  compile('commons-lang:commons-lang:2.6')
  compile('commons-logging:commons-logging:1.2')
  compile('dom4j:dom4j:1.6.1') {transitive = false}
  compile('com.h2database:h2:1.4.196')
  compile('javax.activation:activation:1.1.1')
  compile('javax.mail:mail:1.4.7')
  compile('javax.inject:javax.inject:1')
  compile('javax.validation:validation-api:1.1.0.Final')
  compile('jaxen:jaxen:1.1.6')
  compile('joda-time:joda-time:2.9.9')
  compile('org.hamcrest:hamcrest-all:1.3')
  compile('com.edropple.jregex:jregex:1.2_01')
  compile('log4j:log4j:1.2.17')
  compile('net.sf.ehcache:ehcache-core:2.6.11')
  compile('net.sf.ezmorph:ezmorph:1.0.6')
  compile('net.sf.jsr107cache:jsr107cache:1.1')
  compile('net.sf.oval:oval:1.86')
  compile('mysql:mysql-connector-java:5.1.41')
  compile('oauth.signpost:signpost-core:1.2.1.2')
  compile('org.apache.geronimo.specs:geronimo-servlet_2.5_spec:1.2')
  compile('org.apache.ivy:ivy:2.4.0')
  compile('org.bouncycastle:bcprov-jdk15on:1.57')
  compile('org.bouncycastle:bcpkix-jdk15on:1.57')
  compile('org.codehaus.groovy:groovy-all:2.4.11')
  compile('org.eclipse.jdt:org.eclipse.jdt.core:3.13.0') {transitive = false}
  compile('org.hibernate:hibernate-core:5.2.12.Final')
  compile('org.hibernate.common:hibernate-commons-annotations:5.0.1.Final')
  compile('org.hibernate:hibernate-entitymanager:5.2.12.Final')
  compile('org.hibernate:hibernate-validator:6.0.4.Final')
  compile('org.jboss.logging:jboss-logging:3.3.1.Final')
  compile('org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.1.Final')
  compile('org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final')
  compile('com.fasterxml:classmate:1.3.4')
  compile('org.hibernate:hibernate-c3p0:5.2.12.Final')
  compile('org.hibernate:hibernate-ehcache:5.2.12.Final') {transitive = false}
  compile('com.mchange:mchange-commons-java:0.2.12')
  compile('org.javassist:javassist:3.22.0-GA')
  compile('io.netty:netty:3.10.6.Final')
  compile('org.slf4j:slf4j-api:1.7.22')
  compile('org.slf4j:slf4j-log4j12:1.7.22')
  compile('org.yaml:snakeyaml:1.17')
  compile('net.spy:spymemcached:2.12.1')
  compile('com.thoughtworks.xstream:xstream:1.4.9') {transitive = false}
  compile('xmlpull:xmlpull:1.1.3.4d_b4_min')
  compile('com.google.code.maven-play-plugin.org.playframework:jj-simplecaptcha:1.1')

  compile('junit:junit:4.12'){transitive = false}
  testCompile 'org.mockito:mockito-core:2.11.0'
  testCompile 'org.easytesting:fest-assert:1.4'
}

task libsProd(type: Sync) {
  from configurations.compile
  from configurations.runtime
  into "framework/lib"
}

task libsTest(type: Sync) {
  from configurations.testCompile
  into "framework/lib-test"
}

compileJava.dependsOn libsProd, libsTest

task generateReplayVersion(type: Exec) {
  commandLine 'git', 'describe', '--always'
  standardOutput out

  doFirst {
     standardOutput new FileOutputStream("${buildDir}/classes/java/main/play/version")
     standardOutput.write((project.version + '-').getBytes('UTF-8'))
  }
}

test.dependsOn generateReplayVersion

test {
  include 'play/**/*'
  systemProperties['file.encoding'] = 'UTF-8'
}

jar {
  manifest {
    attributes(
      "Implementation-Title": project.group + '.' + project.name,
      "Implementation-Version": version,
      "Implementation-Vendor": "Codeborne")
  }

  doLast {
    copy {
        from "${archivePath}"
        into 'framework'
        rename ('.*', 'replay.jar')
    }
  }
}

task sourcesJar(type: Jar, dependsOn:classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

javadoc {
  failOnError=false
}

task javadocJar(type: Jar, dependsOn:javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: "file://${buildDir}/repo")
    }
  }
}